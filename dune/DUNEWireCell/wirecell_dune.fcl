#include "services_dune.fcl"

BEGIN_PROLOG

protodunespdata_nfsp: 
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        
        # Libraries in which to look for WCT components
        plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]
        
        # The tool marshals the art::Event to these visitors before.
        # See notes below in params.
        inputers: ["wclsRawFrameSource"
                   # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
                   # and you must have geo::Geometry service in your environment.
                   # ,"wclsMultiChannelNoiseDB"  
               ]
        
        # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
        # fixme: https:#github.com/WireCell/larwirecell/issues/3
        #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
        outputers: ["wclsFrameSaver:spsaver"]

        # This sets the "main" Jsonnet file which provides the 
        # configuration for the Wire-Cell Toolkit components.  It is
        # take as relative to entries in WIRECELL_PATH.
        configs: ["pgrapher/experiment/pdsp/wcls-nf-sp.jsonnet"]

        # Set the "external variables" required by the Jsonnet.
        params : {
            # This locates the input raw::RawDigit collection in the art::Event 
            raw_input_label: "tpcrawdecoder:daq"

            # Set "data" vs. "sim".  The epoch below probably should follow suit.
            reality: "data"
            # reality: "sim"

            # if epoch is "dynamic" you MUST add
            # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
            # add it if not "dynamic"
            # epoch: "dynamic"
            # epoch: "perfect"
            epoch: "after"

            # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
            signal_output_form: "sparse"
        }
    }
}

protodunespdata_wctsp: 
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        
        # Libraries in which to look for WCT components
        plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]
        
        # The tool marshals the art::Event to these visitors before.
        # See notes below in params.
        inputers: ["wclsCookedFrameSource"
                   # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
                   # and you must have geo::Geometry service in your environment.
                   # ,"wclsMultiChannelNoiseDB"  
               ]
        
        # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
        # fixme: https://github.com/WireCell/larwirecell/issues/3
        #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
        outputers: ["wclsFrameSaver:spsaver"]
        
        # This sets the "main" Jsonnet file which provides the 
        # configuration for the Wire-Cell Toolkit components.  It is
        # take as relative to entries in WIRECELL_PATH.
        configs: ["pgrapher/experiment/pdsp/wcls-sp.jsonnet"]
    
        # Set the "external variables" required by the Jsonnet.
        params : {
            # This locates the input raw::RawDigit collection in the art::Event 
            #raw_input_label: "tpcrawdecoder:daq"
            #raw_input_label: "caldata"
            raw_input_label: "caldata:dataprep"
            
            # Set "data" vs. "sim".  The epoch below probably should follow suit.
            reality: "data"
            # reality: "sim"

            # if epoch is "dynamic" you MUST add
            # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
            # add it if not "dynamic"
            # epoch: "dynamic"
            # epoch: "perfect"
            epoch: "after"
            
            # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
            signal_output_form: "sparse"
        }
    }
}

wirecell_protodunespmc:
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]

        plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellLarsoft"]

        // needs to be found via your WIRECELL_PATH 
        # configs: ["pgrapher/experiment/pdsp/wcls-sim-drift-simchannel.jsonnet"]
        configs: ["pgrapher/experiment/pdsp/wcls-sim-drift-simchannel-priorSCE.jsonnet"]


        // Contract note: these exact "type:name" must be used to identify
        // the configuration data structures for these components in the Jsonnet.

        inputers: ["wclsSimDepoSource:"]
        outputers: [
            "wclsSimChannelSink:postdrift",
            "wclsFrameSaver:simdigits"
        ]

        // Make available parameters via Jsonnet's std.extVar()
        params: {
        }
        structs: {
            // Longitudinal diffusion constant [cm2/s]
            DL: 4.0
            // Transverse diffusion constant [cm2/s]
            DT: 8.8
            // Electron lifetime [ms]
            lifetime: 35.0
            // Electron drift speed, assumes a certain applied E-field [mm/us]
            driftSpeed: 1.565
        }
    }
}

dune10kt_mc_nfsp:
{
#empty for now
}

dune10kt_1x2x6_mc_nfsp: 
{
    module_type : WireCellToolkit
    wcls_main: {
        tool_type: WCLS
        apps: ["Pgrapher"]
        
        # Libraries in which to look for WCT components
        plugins: ["WireCellGen", "WireCellSigProc", "WireCellSio", "WireCellPgraph", "WireCellLarsoft"]
        
        # The tool marshals the art::Event to these visitors before.
        # See notes below in params.
        inputers: ["wclsRawFrameSource"
                   # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
                   # and you must have geo::Geometry service in your environment.
                   # ,"wclsMultiChannelNoiseDB"  
               ]
        
        # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
        # fixme: https:#github.com/WireCell/larwirecell/issues/3
        #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
        outputers: ["wclsFrameSaver:spsaver"]

        # This sets the "main" Jsonnet file which provides the 
        # configuration for the Wire-Cell Toolkit components.  It is
        # take as relative to entries in WIRECELL_PATH.
        configs: ["pgrapher/experiment/dune10kt-1x2x6/wcls-nf-sp.jsonnet"]

        # Set the "external variables" required by the Jsonnet.
        params : {
            # This locates the input raw::RawDigit collection in the art::Event 
            raw_input_label: "tpcrawdecoder:daq"

            # Set "data" vs. "sim".  The epoch below probably should follow suit.
            reality: "data"
            # reality: "sim"

            # if epoch is "dynamic" you MUST add
            # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
            # add it if not "dynamic"
            # epoch: "dynamic"
            # epoch: "perfect"
            epoch: "after"

            # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
            signal_output_form: "sparse"
        }
    }
}


# This rewrites existing raw::RawDigit and recob::Wire
# collections in order to truncate and scale them.  This is not
# WCT related but happens to run generic art modules currently
# living in larwirecell.  The intention is to satisfy
# assumptions made by legacy code.
protodunespdata_digitwire : {
    module_type : "EventButcher"
    
    inRawTag: "tpcrawdecoder:daq"
    inSigTag: "wclsdatasp:gauss:"

    # apparently downstream code is too brittle to handle giving
    # any instance names.
    
    outRawTag: ""
    outSigTag: ""
    outAssnTag: ""
    
    # don't throw away data
    
    ndrop: 0
    nkeep: -1
    
    # match some arbitrary and inexplicable "ADC" charge scale
    # instead of number of ionized electrons.
    
    sigscale: 0.005
}

tpcrawdecoder_dunefd_horizdrift : {
 #Empty for now
}

tpcrawdecoder_dunefd_horizdrift_1x2x6 : {

   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]

      logsinks: ["stdout:info", "wcls-sim-drift-simchannel.log:debug"]
      loglevels: ["debug"]

      plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft","WireCellTbb"]

      // needs to be found via your WIRECELL_PATH
      configs: ["pgrapher/experiment/dune10kt-1x2x6/wcls-sim-drift-simchannel.jsonnet"]


      // Contract note: these exact "type:name" must be used to identify
      // the configuration data structures for these components in the Jsonnet.

      inputers: ["wclsSimDepoSource:"]
      outputers: [
         "wclsSimChannelSink:postdrift",
         "wclsFrameSaver:simdigits"
      ]

      // Make available parameters via Jsonnet's std.extVar()
      params: {
      }
      structs: {
        # Longitudinal diffusion constant [cm2/s]
        DL: 4.0
        # Transverse diffusion constant [cm2/s]
        DT: 8.8
        # Electron lifetime [ms]
        lifetime: 10.4
        # Electron drift speed, assumes a certain applied E-field [mm/us]
        driftSpeed: 1.60563
        # G4RefTime [us]
        G4RefTime: @local::dunefd_detectorclocks.G4RefTime
      }

   }
}


tpcrawdecoder_dunefd_vertdrift_2view : {
    module_type : WireCellToolkit
    wcls_main: {
       tool_type: WCLS
       apps: ["Pgrapher"]
       # apps: ["TbbFlow"]

       logsinks: ["stdout:info", "wcls-sim-drift-simchannel.log:debug"]
       loglevels: ["debug"]

       plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft","WireCellTbb"]

       // needs to be found via your WIRECELL_PATH
       # configs: ["pgrapher/experiment/dune-vd/wcls-sim-drift-simchannel-3view.json"]
       #configs: ["pgrapher/experiment/dune-vd/wcls-sim-drift-simchannel-3view30deg.json"]
        configs: ["pgrapher/experiment/dune-vd/wcls-sim-drift-simchannel-2view.json"]


       // Contract note: these exact "type:name" must be used to identify
       // the configuration data structures for these components in the Jsonnet.

       inputers: ["wclsSimDepoSource:"]
       outputers: [
          "wclsSimChannelSink:postdrift",
          "wclsFrameSaver:simdigits"
       ]

       // Make available parameters via Jsonnet's std.extVar()
       params: {
       }
       structs: {
       }
    }
}



tpcrawdecoder_dunefd_vertdrift_3view: {
    @table::tpcrawdecoder_dunefd_vertdrift_2view
    wcls_main: {
        @table::tpcrawdecoder_dunefd_vertdrift_2view.wcls_main
        configs: ["pgrapher/experiment/dune-vd/wcls-sim-drift-simchannel-3view.json"]
    }
}

tpcrawdecoder_dunefd_vertdrift_3view_30deg: {
    @table::tpcrawdecoder_dunefd_vertdrift_2view
    wcls_main: {
        @table::tpcrawdecoder_dunefd_vertdrift_2view.wcls_main
        configs: ["pgrapher/experiment/dune-vd/wcls-sim-drift-simchannel-3view30deg.json"]
    }
}

dune10kt_dunefd_vertdrift_data_nfsp : {
#empty for now
}

dune10kt_dunefd_vertdrift_1x6x6_data_nfsp : {
  @table::dune10kt_dunefd_vertdrift_data_nfsp
}

dune10kt_dunefd_vertdrift_1x6x6_3view_data_nfsp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]

      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]

      # Libraries in which to look for WCT components
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]

      # The tool marshals the art::Event to these visitors before.
      # See notes below in params.
      inputers: ["wclsRawFrameSource"
         # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
         # and you must have geo::Geometry service in your environment.
         # ,"wclsMultiChannelNoiseDB"  
      ]

      # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
      # fixme: https://github.com/WireCell/larwirecell/issues/3
      #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
      outputers: ["wclsFrameSaver:spsaver"]

      # This sets the "main" Jsonnet file which provides the 
      # configuration for the Wire-Cell Toolkit components.  It is
      # take as relative to entries in WIRECELL_PATH.
      configs: ["pgrapher/experiment/dune-vd/wcls-nf-sp.jsonnet"]

      # Set the "external variables" required by the Jsonnet.
      # ext-var, string
      params : {
          # This locates the input raw::RawDigit collection in the art::Event 
          raw_input_label: "tpcrawdecoder:daq"
          # raw_input_label: "simmer:orig"
          #raw_input_label: "caldata"

          # Set "data" vs. "sim".  The epoch below probably should follow suit.
          reality: "data"
          # reality: "sim"

          # if epoch is "dynamic" you MUST add
          # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
          # add it if not "dynamic"
          # epoch: "dynamic"
          # epoch: "perfect"
          epoch: "after"

          # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
          signal_output_form: "sparse"

          # file: wires
          # dunevd10kt-1x6x6-3view-wires-v1.json.bz2
          # dunevd10kt-1x6x6-3view30deg-wires-v1.json.bz2
          # dunevd10kt-1x6x6-2view-wires-v1.json.bz2
          files_wires: "dunevd10kt-1x6x6-3view-wires-v1.json.bz2"

          # file: fields
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2
          # 2view: pcbro-response-avg-12d50.json.bz2
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"

          # set mapping between internal wct plane ids and larsoft
          # WCT assumes kU, kV, kW regardless of orientation. 
          # Larsoft expects kY for 2nd induction plane for this geometry
          # Set the mapping as kU->kU, kV->kY, kW->kW in the jsonnet
          geo_planeid_labels: "dunevd_3view"
          
      }
      # ext-code, code
      structs : {
          # for nticks calculation in common/params.jsonnet: elec
          driftSpeed: 1.60563
          
          # used in ChannelSelector
          # 3view: 864; 3view30deg: 900; 2view: 928
          channel_per_crm: 864
          
          # response plane, related to which field response is used [cm]
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2: 18.92
          # 2view: pcbro-response-avg-12d50.json.bz2: 12.50
          response_plane: 18.92
      }
   }
}

dune10kt_dunefd_vertdrift_1x6x6_3view_30deg_data_nfsp : {
   module_type : WireCellToolkit
   wcls_main: {
      tool_type: WCLS
      apps: ["Pgrapher"]

      logsinks: ["stdout"]
      loglevels: ["debug", "pgraph:info"]

      # Libraries in which to look for WCT components
      plugins: ["WireCellGen", "WireCellSigProc", "WireCellRoot", "WireCellPgraph", "WireCellLarsoft"]

      # The tool marshals the art::Event to these visitors before.
      # See notes below in params.
      inputers: ["wclsRawFrameSource"
         # To use wclsMultiChannelNoiseDB you must also put epoch:dynamic below
         # and you must have geo::Geometry service in your environment.
         # ,"wclsMultiChannelNoiseDB"  
      ]

      # or after the WCT app is run.  These names MUST be used identically in the Jsonnet
      # fixme: https://github.com/WireCell/larwirecell/issues/3
      #outputers: ["wclsFrameSaver:nfsaver", "wclsFrameSaver:spsaver"]
      outputers: ["wclsFrameSaver:spsaver"]

      # This sets the "main" Jsonnet file which provides the 
      # configuration for the Wire-Cell Toolkit components.  It is
      # take as relative to entries in WIRECELL_PATH.
      configs: ["pgrapher/experiment/dune-vd/wcls-nf-sp.jsonnet"]

      # Set the "external variables" required by the Jsonnet.
      # ext-var, string
      params : {
          # This locates the input raw::RawDigit collection in the art::Event 
          raw_input_label: "tpcrawdecoder:daq"
          # raw_input_label: "simmer:orig"
          #raw_input_label: "caldata"

          # Set "data" vs. "sim".  The epoch below probably should follow suit.
          reality: "data"
          # reality: "sim"

          # if epoch is "dynamic" you MUST add
          # "wclsMultiChannelNoiseDB" to "inputers" and must NOT
          # add it if not "dynamic"
          # epoch: "dynamic"
          # epoch: "perfect"
          epoch: "after"

          # Save output signal waveforms (recob::Wire) in "sparse" or "dense" form
          signal_output_form: "sparse"

          # file: wires
          # dunevd10kt-1x6x6-3view-wires-v1.json.bz2
          # dunevd10kt-1x6x6-3view30deg-wires-v1.json.bz2
          # dunevd10kt-1x6x6-2view-wires-v1.json.bz2
          files_wires: "dunevd10kt-1x6x6-3view30deg-wires-v1.json.bz2"

          # file: fields
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2
          # 2view: pcbro-response-avg-12d50.json.bz2
          files_fields: "dunevd-resp-isoc3views-18d92.json.bz2"
          
          # set mapping between internal wct plane ids and larsoft
          # default is to assume WireCell::kU->geo::kU, kV->kV, kW->kW
          geo_planeid_labels: "default"
      }
      # ext-code, code
      structs : {
          # for nticks calculation in common/params.jsonnet: elec
          driftSpeed: 1.60563
          
          # used in ChannelSelector
          # 3view: 864; 3view30deg: 900; 2view: 928
          channel_per_crm: 900
          
          # response plane, related to which field response is used [cm]
          # 3view30: dunevd-resp-isoc3views-18d92.json.bz2: 18.92
          # 2view: pcbro-response-avg-12d50.json.bz2: 12.50
          response_plane: 18.92
      }
   }
}

END_PROLOG
